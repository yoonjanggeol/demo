Basic Authentication
 - 사용자 이름 / 비밀번호를 Base64로 인코딩하여 Authentication 헤더에 포함하여 전송됨
 - 매우 안전하지 않음, SSL/TLS와 함께 사용됨

Authentication: Basic ~~~~~~~~

Bearer Token Authentication
 - 헤더에 토큰을 포함하여 전송 Authentication 헤더에 포함하여 전송
 - JWT을 사용하여 인증
 - 간단한 방식, 상태를 유지하지 않음, 확장성이 높음
 - 토큰 노출 위험, 토큰 관리

Authentication: Bearer ~~~~~~~~~~

OAuth
 - 토큰기반 인증 방식
 - 사용자가 직접 자격을 증명 X, 미리 인증 받아서 토큰을 발급 받고
 - 이 토큰을 이요하여 API를 요청하는 방식 OAuth 2.0 

Kakao / Naver / Git / Facebook


API key / Session based Authentication

JWT(JSON Web Token): 클레임이라고 불리는 정보를 JSON 형태로 안전하게 전송하기 위한 토큰 기반의 표준
 - 인증과 정보 교환에 사용, 서명이 되어 있어서 신뢰성 확보가 가능

1. Header : 토큰의 타입과 사용된 알고리즘 정보를 담고 있음, Base64Url로 인코딩
2. Payload : 클레임 정보, 대상, 발행자, 만료 시간 등 다양한 정보가 포함됨, Base64Url로 인코딩
3. Signature: Header와 Payload, Secret key를 사용하여 생성된 서명

인증, 정보교환

장점
 - 상태 유지 X : 서버가 사용자의 상태 유지 안함
 - 간단하고 자기 포함적 : 자신이 필요한 모든 정보를 가지고 있음
 - 확장성 : 한번 토큰을 만들면 다른 서버에서 사용 가능(동일 방식일 때)

단점
 - 크기 : 클레임이 많을 수록 토큰의 크기가 커짐(자리수가 많을 수록 암호화된 코드 길이가 길어짐)
 - 보안 : 서명은 되어 신뢰성이 있지만, 암호화는 되어있지 않음 중요한 정보를 JWT에 포함하면 안됨(암호화라기보다는 인코딩되어 있어서 디코딩만 시키면 정보 노출됨)
 - 토큰 관리 : 만료 시간, 갱신

filter : 여러 단계를 걸쳐 승인된 정보가 아니면 못 지나감









